<template>
  <div id="app">
    <md-dialog md-open-from="#fab" md-close-to="#fab" ref="dialog2">
      <md-dialog-title>회원가입</md-dialog-title>

      <md-dialog-content>
        <form>
          <md-input-container>
            <label>이름</label>
            <md-textarea maxlength="20" name="name" v-model.trim="name"></md-textarea>
          </md-input-container>

          <md-input-container>
            <label>이메일</label>
            <md-input maxlength="20" name="email" v-model.trim="email"></md-input>
          </md-input-container>

          <md-input-container>
            <label>패스워드</label>
            <md-input maxlength="20" name="password" v-model.trim="password"></md-input>
          </md-input-container>

          <md-input-container>
            <label>패스워드확인</label>
            <md-input maxlength="20" name="password_confirmation" v-model.trim="password_confirmation"></md-input>
          </md-input-container>

          <div v-if="hasErrors">
            <p v-for="error in errors">
              <span class="md-body-2">{{ error }}</span>
            </p>
          </div>
        </form>
      </md-dialog-content>

      <md-dialog-actions>
        <md-button class="md-primary" @click.native="register()" :class="{ 'md-accent': isLoading }">회원가입</md-button>
        <md-button class="md-primary" @click="closeDialog('dialog2')">취소</md-button>
        <md-button class="md-primary" @click="closeDialog('dialog2')">가입</md-button>
        <router-link to="/login"><md-button class="md-primary">로그인</md-button></router-link>
      </md-dialog-actions>
    </md-dialog>

    <md-button class="md-fab md-fab-bottom-right" id="fab" @click.native="openDialog('dialog2')">
      <md-icon>account_box</md-icon>
    </md-button>
  </div>
</template>

<script>
import md5 from 'md5'
export default {
  name: 'register',
  data () {
    return {
      name: '',
      email: '',
      password: '',
      password_confirmation: '',
      errors: [],
      usersRef: firebase.database().ref('users'),
      isLoading: false
    }
  },
  computed: {
    hasErrors () {
      return this.errors.length > 0
    }
  },
  methods: {
    openDialog(ref) {
      this.$refs[ref].open();
    },
    closeDialog(ref) {
      this.$refs[ref].close();
    },
    onOpen() {
      console.log('Opened');
    },
    onClose(type) {
      console.log('Closed', type);
    },
    register () {
      console.log("회원가입");
      this.errors = [];
      if(this.isFormValid()){
        this.isLoading = true;
        firebase.auth().createUserWithEmailAndPassword(this.email, this.password)
        .then( user => {
          console.log("회원가입" + user.email);
          user.updateProfile({
            displayName: this.name,
            photoURL: "https://www.gravatar.com/avatar/"+md5(user.email)+"?d=identicon"
          }).then ( () => {
            //아바타 적용
            this.saveUserToUsersRef(user).then( () => {
              this.$store.dispatch("setUser", user)
              this.$router.push('/')
            })
          }, error => {
              console.log(error);
              this.errors.push(error.message);
          })
        }).catch( error => {
          console.log(error);
          this.errors.push(error.message);
          this.isLoading = false;
        })
      }
    },
    saveUserToUsersRef (user) {
      return this.usersRef.child(user.uid).set({
        name: user.displayName,
        avatar: user.photoURL
      })
    },
    isEmpty () {
      if(this.name.length == 0 || this.email.length == 0 || this.password.length == 0 || this.password_confirmation.length == 0){
        return true;
      }
      return false;
    },
    passwordValid () {
      if(this.password.length < 6 || this.password_confirmation.length < 6){
        return false;
      }
      if(this.password !== this.password_confirmation){
        return false;
      }
      return true;
    },
    isFormValid () {
      if(this.isEmpty()){
        this.errors.push('내용을 입력해 주세요!')
        return false;
      }
      if(!this.passwordValid()){
        this.errors.push('패스워드가 일치하지 않습니다!')
        return false;
      }
      return true;
    }
  }
};
</script>

<style scoped>

</style>
